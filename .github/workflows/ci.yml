name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8

      - name: Run flake8
        run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SERVER_IP: ${{ secrets.SERVER_IP }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r req.txt 

      - name: Run tests
        run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            if [ ! -d "Habit_tracker" ]; then
              git clone https://github.com/DanielNegusto/Habit_tracker.git Habit_tracker
            fi
            
            cd Habit_tracker || exit 1;  
            echo "Текущая директория: $(pwd)"; 
            git checkout main;
            git pull;
          
            # Создание .env файла с переменными окружения
            cat <<EOL > .env
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            SERVER_IP=${{ secrets.SERVER_IP }}
            EOL
          
            # Остановка и удаление старых контейнеров
            sudo docker-compose --file docker-compose.yaml down;
          
            # Запуск новых контейнеров
            sudo docker-compose --file docker-compose.yaml up -d;
          
            # Очистка неиспользуемых образов и контейнеров
            sudo docker system prune --all --force;
          EOF